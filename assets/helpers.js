// Generated by CoffeeScript 1.6.3
var AceRange, abTest, abTestWrite, allMarkers, baseEditorChange, basicJqueryObject, codeValidity, editorTimer, editors, errorRowNumber, getAST, handleNewBlueprintFormat, initDots, initEditors, initLive, invalidContent, readCookie, sendCode, sendCodeString, sending, setCookie, timeoutInProgress, validateEditor, variant;

readCookie = function(name) {
  var c, ca, i, nameEQ;
  nameEQ = escape(name) + "=";
  ca = document.cookie.split(";");
  i = 0;
  while (i < ca.length) {
    c = ca[i];
    while (c.charAt(0) === " ") {
      c = c.substring(1, c.length);
    }
    if (c.indexOf(nameEQ) === 0) {
      return unescape(c.substring(nameEQ.length, c.length).replace(/"/g, ''));
    }
    i++;
  }
};

setCookie = function(cookieName, cookieValue, expire) {
  if (expire == null) {
    expire = null;
  }
  if (!expire) {
    expire = new Date();
    expire.setDate(expire.getDate() + 365 * 30);
  }
  return document.cookie = escape(cookieName) + "=" + escape(cookieValue) + ";expires=" + expire.toGMTString() + ";domain=." + location.hostname + ";path=/";
};

variant = false;

abTest = function(usableVariants, fallbackVariant) {
  var maxI, minI;
  maxI = usableVariants.length - 1;
  minI = -1;
  variant = readCookie('ab_testing_variant');
  if ((!!variant) || (variant === '0') || (variant === '-1')) {
    variant = parseInt(variant, 10);
    if (variant < 0) {
      window.ab_variant = fallbackVariant;
      return;
    }
    if (variant > maxI) {
      variant = false;
    }
  } else {
    variant = false;
  }
  if (variant === false) {
    variant = Math.floor(Math.random() * (maxI - minI + 1) + minI);
    setCookie('ab_testing_variant', variant, new Date(1 * new Date() + 3600 * 1000));
  }
  if (variant > -1) {
    window.ab_variant = usableVariants[variant][0];
    return usableVariants[variant];
  }
};

abTestWrite = function(klass, usableVariants, fallbackVariant) {
  var chosenVariant, s;
  chosenVariant = abTest(usableVariants, fallbackVariant);
  if (!chosenVariant) {
    return;
  }
  s = "" + (unescape('%3Cspan')) + " class=\"" + klass + "\"" + (unescape("%3E"));
  s += chosenVariant[1];
  s += unescape("%3C/span%3E");
  return document.write(s);
};

initDots = function() {
  var $els;
  $els = [].slice.call(document.querySelectorAll('.anim__item'), 0);
  return $els.forEach(function(dot, ind) {
    var frg, i, s;
    i = parseInt(dot.getAttribute('data-dots'), 10);
    frg = document.createElement('span');
    frg.setAttribute('class', "anim__dots__all anim__len__" + i + " anim__delay__" + ind);
    dot.style.width = frg.style.width = i * 11 + 'px';
    s = '';
    s += '<span class="anim--dot"></span>';
    frg.innerHTML = s;
    return dot.insertBefore(frg, dot.lastChild);
  });
};

getAST = function(code, thenBack, errorBack) {
  promise.post(window.astParserURI + '?_t=' + (1 * (new Date())), JSON.stringify({
    blueprintCode: code
  }), {
    "Accept": "application/json",
    'Content-type': 'application/json; charset=utf-8'
  }).then(thenBack);
};

editorTimer = null;

baseEditorChange = function() {
  if (!!editorTimer) {
    clearTimeout(editorTimer);
  }
  return editorTimer = setTimeout(validateEditor, 200);
};

editors = {};

validateEditor = function() {
  var code, newCode;
  code = editors['editor_ace'].getSession().getValue().replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  newCode = code + '';
  editors['editor_ace'].getSession().clearAnnotations();
  return handleNewBlueprintFormat(code);
};

sendCodeString = '';

sending = false;

handleNewBlueprintFormat = function(code, codeInside) {
  var timeoutInProgress;
  if (sending) {
    clearTimeout(sending);
    sending = false;
  }
  sendCodeString = ''.concat(code);
  timeoutInProgress = true;
  return sending = setTimeout(sendCode, 500);
};

allMarkers = [];

timeoutInProgress = false;

AceRange = null;

sendCode = function() {
  timeoutInProgress = false;
  return getAST(sendCodeString, function(err, text, xhr) {
    var data, doc, e, editorErrors, loc, locKey, oneMarker, positioning, rangePos, sess, warn, warnColumnEnd, warnKey, warnings, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    sess = editors['editor_ace'].getSession();
    sess.clearAnnotations();
    doc = sess.getDocument();
    if (timeoutInProgress) {
      timeoutInProgress = false;
      return false;
    }
    while (oneMarker = allMarkers.shift()) {
      sess.removeMarker(oneMarker);
    }
    allMarkers = [];
    try {
      data = JSON.parse(xhr.responseText);
    } catch (_error) {
      e = _error;
      data = false;
    }
    if (data) {
      editors['output_ast'].setValue(JSON.stringify((data.ast ? data.ast : data), null, '\t'), -1);
      editors['output_ast'].getSession().getUndoManager().reset();
    }
    if (err && text) {
      editorErrors = [];
      if ((data != null ? data.location : void 0) != null) {
        if ((data != null ? (_ref = data.location) != null ? (_ref1 = _ref[0]) != null ? _ref1.index : void 0 : void 0 : void 0) != null) {
          positioning = doc.indexToPosition(parseInt(data.location[0].index, 10), 0);
          editorErrors.push({
            type: 'error',
            row: positioning.row,
            column: positioning.column,
            text: data.description.substr(0, 1).toUpperCase() + data.description.slice(1)
          });
          sess.setAnnotations(editorErrors);
        } else {
          errorRowNumber.text("");
          codeValidity.not('.notValidContent').attr("class", "notValidContent");
        }
        invalidContent.text("\"" + data.description + "\"");
      } else {
        alert("There was an error with your blueprint code.\n\n" + xhr.responseText);
      }
      return;
    } else if (err && !xhr.responseText) {
      alert('Error sending blueprint code to server for elementary parser check.');
      return;
    } else if (!err && xhr.responseText) {
      if (!((data != null ? (_ref2 = data.warnings) != null ? _ref2.length : void 0 : void 0) > 0)) {
        codeValidity.not('.valid').attr("class", "valid");
        sess.clearAnnotations();
        return;
      }
      warnings = [];
      positioning = false;
      _ref3 = data.warnings || [];
      for (warnKey = _i = 0, _len = _ref3.length; _i < _len; warnKey = ++_i) {
        warn = _ref3[warnKey];
        if (((_ref4 = warn.location) != null ? (_ref5 = _ref4[0]) != null ? _ref5.index : void 0 : void 0) == null) {
          continue;
        }
        rangePos = new Array();
        positioning = doc.indexToPosition(parseInt(warn.location[0].index, 10), 0);
        warnings.push({
          type: 'warning',
          row: positioning.row,
          column: positioning.column,
          text: warn.message.substr(0, 1).toUpperCase() + warn.message.slice(1)
        });
        rangePos.push(positioning.row);
        warnColumnEnd = warn.location[0].length;
        if (warn.location.length > 0) {
          _ref6 = warn.location || [];
          for (locKey = _j = 0, _len1 = _ref6.length; _j < _len1; locKey = ++_j) {
            loc = _ref6[locKey];
            positioning = doc.indexToPosition(parseInt(loc.index, 10), 0);
            rangePos.push(positioning.row);
          }
        }
        if (rangePos.length > 0) {
          rangePos.sort();
          allMarkers.push(sess.addMarker(new AceRange(rangePos[0], 0, rangePos.pop(), warnColumnEnd), 'warningLine', "fullLine"));
        }
      }
      if (positioning !== false) {
        invalidContent.text("\"There " + (warnings.length > 1 ? "are " + warnings.length + " warnings" : "is one warning at line " + (positioning.row + 1)) + "\"");
      } else {
        invalidContent.text(": " + data.warnings[0].message);
      }
      codeValidity.not('.notValidContent').attr("class", "notValidContent");
      sess.setAnnotations(warnings);
    }
  });
};

basicJqueryObject = (function() {
  function basicJqueryObject() {}

  basicJqueryObject.prototype.not = function() {
    return this;
  };

  basicJqueryObject.prototype.attr = function(name, val) {
    return this;
  };

  basicJqueryObject.prototype.text = function(s) {
    return this;
  };

  return basicJqueryObject;

})();

codeValidity = new basicJqueryObject();

errorRowNumber = new basicJqueryObject();

invalidContent = new basicJqueryObject();

initEditors = function() {
  var $els, clickListItem, hashed, loadExample, old;
  AceRange = ace.require('ace/range').Range;
  ['editor_ace', 'output_ast'].forEach(function(editorName) {
    var editor;
    editor = ace.edit(editorName);
    if (editorName === 'editor_ace') {
      editor.getSession().setMode('ace/mode/markdown');
    } else {
      editor.getSession().setMode('ace/mode/json');
      editor.renderer.hideCursor();
    }
    editor.setHighlightActiveLine(false);
    editor.setReadOnly(true);
    editor.session.setFoldStyle('markbeginend');
    editor.getSession().setUseSoftTabs(true);
    editor.setTheme("ace/theme/twilight");
    editor.setShowPrintMargin(false);
    editor.setShowFoldWidgets(true);
    return editors[editorName] = editor;
  });
  loadExample = function(listItem) {
    editors['editor_ace'].setValue(listItem.querySelector('code.markdown').firstChild.data, -1);
    editors['editor_ace'].getSession().getUndoManager().reset();
    editors['output_ast'].setValue(listItem.querySelector('code.ast').firstChild.data, -1);
    return editors['output_ast'].getSession().getUndoManager().reset();
  };
  hashed = false;
  if (window.location.hash) {
    hashed = document.querySelector('a[href*="' + window.location.href.split('#').pop() + '"]');
  }
  if (!hashed) {
    loadExample(document.querySelector('li.examples__tab.active'));
  } else {
    old = document.querySelector('li.examples__tab.active');
    old.className = old.className.replace('active', '').trim();
    hashed.parentNode.className += ' active';
    loadExample(hashed.parentNode);
  }
  clickListItem = function() {
    if (this.parentNode.className.indexOf('active') < 0) {
      old = document.querySelector('li.examples__tab.active');
      old.className = old.className.replace('active', '').trim();
      this.parentNode.className += ' active';
      loadExample(this.parentNode);
    }
  };
  document.querySelector('.page--examples').className += ' loaded';
  $els = [].slice.call(document.querySelectorAll('.examples__tab a'), 0);
  return $els.forEach(function(linkItem) {
    if (linkItem.addEventListener) {
      return linkItem.addEventListener('click', clickListItem, false);
    } else if (linkItem.attachEvent) {
      return linkItem.attachEvent('onclick', clickListItem);
    }
  });
};

initLive = function() {
  var editor;
  editor = editors['editor_ace'];
  editor.setHighlightActiveLine(true);
  editor.setReadOnly(false);
  editor.getSession().on('paste', baseEditorChange);
  editor.getSession().on('change', baseEditorChange);
};
